1.springboot 整合第三方数据源时，如druid，需根据springboot使用的版本来配置相对应的自动配置类
    package com.sss.online.config;
    import com.alibaba.druid.pool.DruidDataSource;
    import com.alibaba.druid.support.http.StatViewServlet;
    import com.alibaba.druid.support.http.WebStatFilter;
    import org.springframework.boot.context.properties.ConfigurationProperties;
    import org.springframework.boot.web.servlet.FilterRegistrationBean;
    import org.springframework.boot.web.servlet.ServletRegistrationBean;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import javax.servlet.Filter;
    import javax.sql.DataSource;
    import java.util.Arrays;
    import java.util.HashMap;
    import java.util.Map;
    @Configuration
    public class MyDataSourceConfig {
        //注册数据源，并绑定配置文件中以spring.datasource前缀开头的相关属性
        @ConfigurationProperties(prefix = "spring.datasource")
        @Bean
        public DataSource druid(){
            //return DataSourceBuilder.create().build();springboot 2.0以上，在整合druid时，需要导入log4j依赖，如果不导入则可以使用
            //DataSourceBuilder.create().build()来构建;
            return new DruidDataSource();
        }
        //配置Druid的监控
        //1.配置一个管理后台的Servlet
        @Bean
        public ServletRegistrationBean staViewServlet(){
            ServletRegistrationBean<StatViewServlet> bean = new ServletRegistrationBean<>(new StatViewServlet(), "/druid/*");
            Map<String,String> initParams = new HashMap<>();
            //设置servlet初始化参数
            initParams.put("loginUsername","admin");//登陆名
            initParams.put("loginPassword","123456");//密码
            initParams.put("allow","");//默认就是允许所有访问
            initParams.put("deny","192.168.15.21");//拒绝相对应的id访问
            bean.setInitParameters(initParams);
            //加载到容器中
            return bean;
        }
        //2.配置一个web监控的filter
        @Bean
        public FilterRegistrationBean webStatFilter(){
            FilterRegistrationBean<Filter> bean = new FilterRegistrationBean<>();
            bean.setFilter(new WebStatFilter());
            Map<String,String> initParams = new HashMap<>();
            //设置filter初始化参数、
            initParams.put("exclusions","*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*");//排除静态资源和请求
            bean.setInitParameters(initParams);
            //拦截所有请求
            bean.setUrlPatterns(Arrays.asList("/*"));
            //加载到容器中
            return bean;
        }
    }
2.springboot 整合mybatis时，若是使用纯注解的方式，则需要在mybatis配置类中设置相对应的属性
    package com.sss.online.config;
    import org.apache.ibatis.session.Configuration;
    import org.mybatis.spring.boot.autoconfigure.ConfigurationCustomizer;
    import org.springframework.context.annotation.Bean;
    //mybatis整合springboot，使用纯注解版时，若java类中的变量与数据库中的字段是驼峰命名法时
    //会造成对应表不上。应该添加一个定制配置ConfigurationCustomizer来开启驼峰命名法
    @org.springframework.context.annotation.Configuration
    public class MybatisConfig {

        @Bean
        public ConfigurationCustomizer configurationCustomizer(){
            // new 接口后面并实现其中的方法，属于匿名类的实现方法。
            return new ConfigurationCustomizer() {
                @Override
                public void customize(Configuration configuration) {
                    configuration.setMapUnderscoreToCamelCase(true);
                }
            };
        }
    }
3.若是不使用配置类的方式，而是以配置文件的方式配置mybatis，则在application.yml配置文件
中添加以下设置
mybatis:
         config-location: classpath:mybatis/mybatis-config.xml;
并在指定路径下新建mybatis-config.xml配置文件：
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
   <settings>
       <setting name="mapUnderscoreToCamelCase" value="true"/>
   </settings>
</configuration>
4.使用@Mapper，@MapperScan注解，@Repository，前两者会提示自动注入失败，但是仍旧可以使用
而后者不会报错。